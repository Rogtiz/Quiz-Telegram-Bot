import requests
import logging
from aiogram import types
from aiogram.filters import Command
# from aiogram.filters import Command
import handlers.movie_quiz_handler as mq
from database import db_queries as db


in_quiz = False
questions = [{"answers": [False]}, {"answers": [False]}, {"answers": [False]}, {"answers": [False]}, {"answers": [False]}]

async def main_menu(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), types.KeyboardButton(text="üé¨ –ö–∏–Ω–æ–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
        [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(text="üèÜ –¢–æ–ø")],
        [types.KeyboardButton(text="‚ùì –û –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"), types.KeyboardButton(text="‚ùì –û –∫–∏–Ω–æ–≤–∏–∫—Ç–æ—Ä–∏–Ω–µ")]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


async def cmd_start(message: types.Message):
    if not db.is_user_exists(message.from_user.id):
        db.save_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                     message.from_user.last_name)

    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤–∞–º –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ —Ç—É—Ç —Å–∞–º—ã–π —É–º–Ω—ã–π!')
    await main_menu(message)


async def cmd_help(message: types.Message):
    await message.answer('‚úçÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–º–∞–Ω–¥:\n/victory - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n/help - –ü–æ–º–æ—â—å\n/stop - '
                         '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    await message.delete()


async def cmd_stats(message: types.Message):
    if not db.is_user_exists(message.from_user.id):
        await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /start')
    else:
        result = db.get_user_info(message.from_user.id, '*')
        print(result)
        username = message.from_user.username
        stats_level = result[6]
        stats_experience = result[5]
        experience_threshold = 4 * (2 ** (stats_level - 1))
        stats_questions_qty = result[7]
        stats_correct_answers = result[8]
        stats_incorrect_answers = result[9]
        stats_movie_questions_qty = result[10]
        stats_movie_correct = result[11]
        stats_movie_incorrect = result[12]

        await message.answer(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}</b>:\n\nüíé <b>–£—Ä–æ–≤–µ–Ω—å:</b> {stats_level}\n"
                             f"‚è≥ <b>–û–ø—ã—Ç:</b> {stats_experience}/{experience_threshold}\n\n"
                             f"üìå <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {stats_questions_qty}\nüü© <"
                             f"b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {stats_correct_answers}\n"
                             f"üü• <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {stats_incorrect_answers}\n\nüé¨ <b>–ö–∏–Ω–æ–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b>\n"
                             f"\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {stats_movie_questions_qty}\nüü© <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö "
                             f"–æ—Ç–≤–µ—Ç–æ–≤:</b> {stats_movie_correct}\nüü• <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> "
                             f"{stats_movie_incorrect}\n", parse_mode='HTML')


async def cmd_top(message: types.Message):
    if not db.is_user_exists(message.from_user.id):
        await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /start')
    else:
        kb = [
            [types.KeyboardButton(text="üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é")],
            [types.KeyboardButton(text="üèÜ –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ]

        keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞:", reply_markup=keyboard)


async def cmd_top_level(message: types.Message):
    result = db.get_top_users('level')
    message_text = "<b>üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n"
    for i in range(len(result)):
        message_text += f"{i + 1}. {result[i][2]} - {result[i][6]} —É—Ä–æ–≤–µ–Ω—å\n"
    await message.answer(message_text, parse_mode='HTML')


async def cmd_top_questions_qty(message: types.Message):
    result = db.get_top_users('questions_qty')
    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "<b>üèÜ –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ø–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for i in range(len(result)):
        message_text += f"{i + 1}. {result[i][2]} - {result[i][7]} –≤–æ–ø—Ä–æ—Å–æ–≤\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(message_text, parse_mode='HTML')


async def about_simple_quiz(message: types.Message):
    photo_url = 'https://i.imgur.com/8pjhcEW.png'  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    caption = ('üß† <b>Simple Quiz</b> - —ç—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞–ø–æ–¥–æ–±–∏–µ <b><i>"–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º"</i></b>\n\n<b>–°—É—Ç—å '
               '–∏–≥—Ä—ã: </b>–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —É –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –≤–∞–∂–Ω–æ, '
               '–≤–µ–¥—å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–¥–∞–µ—Ç—Å—è –æ–ø—ã—Ç, –∞ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ '
               '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\nüü¢ –õ–µ–≥–∫–∞—è - 1 –µ–¥. –æ–ø—ã—Ç–∞\nüü° –°—Ä–µ–¥–Ω—è—è - 2 –µ–¥. –æ–ø—ã—Ç–∞\nüî¥ –°–ª–æ–∂–Ω–∞—è - 4. –µ–¥ –æ–ø—ã—Ç–∞\n\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ '
               '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞–º –±—É–¥–µ—Ç'
               '–∑–∞–¥–∞–Ω–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É, –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.')  # –¢–µ–∫—Å—Ç
    # –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    await message.reply_photo(photo=photo_url, caption=caption, parse_mode='HTML')


async def about_movie_quiz(message: types.Message):
    photo_url = 'https://i.imgur.com/FX57gYZ.png'  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    caption = ('üé¨ <b>Movie Quiz</b> - —ç—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –≥–¥–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–≥–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n\n<b>–°—É—Ç—å '
               '–∏–≥—Ä—ã: </b>–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞. –ü–æ —ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã '
               '–¥–æ–ª–∂–Ω—ã —É–≥–∞–¥–∞—Ç—å —Ñ–∏–ª—å–º –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ. \n\nüîî <b>–í–∞–∂–Ω–æ: </b> –§–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–≥–∞–¥–∞–Ω—ã, '
               '—Å–æ—Å—Ç–æ—è—Ç –≤ —Å–ø–∏—Å–∫–µ <b><i>–¢–æ–ø-250 —Ñ–∏–ª—å–º–æ–≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞</i></b>.\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫: '
               '</b>https://www.kinopoisk.ru/lists/movies/top250')  # –¢–µ–∫—Å—Ç
    # –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    await message.reply_photo(photo=photo_url, caption=caption, parse_mode='HTML')


async def start_quiz(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üü¢ –õ–µ–≥–∫–∏–π")],
        [types.KeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π")],
        [types.KeyboardButton(text="üî¥ –°–ª–æ–∂–Ω—ã–π")],
        [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)


def get_questions(difficulty):
    url = 'https://engine.lifeis.porn/api/millionaire.php'
    params = {'qType': difficulty_mapping[difficulty], 'count': 5}

    response = requests.get(url, params=params)
    data = response.json()

    if data['ok']:
        return data['data']
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {data['info']}")
        return None


difficulty_mapping = {"üü¢ –ª–µ–≥–∫–∏–π": 1, "üü° —Å—Ä–µ–¥–Ω–∏–π": 2, "üî¥ —Å–ª–æ–∂–Ω—ã–π": 3}

difficulty = 0

async def choose_difficulty(message: types.Message):
    global difficulty, in_quiz
    difficulty = message.text.lower()
    global questions
    questions = get_questions(difficulty)
    if questions:
        in_quiz = True
        await ask_question(message)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


current_question_index = 0
user_answers = []


async def answer_question(message: types.Message):
    global current_question_index, user_answers

    if current_question_index < len(questions):
        user_answer = message.text
        # correct_answer = questions[current_question_index]['answers'][0]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ

        # answer_mapping = {"a": 0, "b": 1, "c": 2, "d": 3}

        if user_answer == correct_answer:
            user_answers.append(True)
        else:
            user_answers.append(False)

        current_question_index += 1

        if current_question_index < len(questions):
            await ask_question(message)
        else:
            await show_results(message)
    else:
        logging.error("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–µ–º –µ—Å—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")


async def ask_question(message: types.Message):
    current_question = questions[current_question_index]
    question_text = current_question['question']
    answers = current_question['answers']
    global correct_answer
    correct_answer = answers[0]
    answers = current_question['answers'].sort()

    kb = [
        [types.KeyboardButton(text=current_question['answers'][0]),
         types.KeyboardButton(text=current_question['answers'][1])],
        [types.KeyboardButton(text=current_question['answers'][2]),
         types.KeyboardButton(text=current_question['answers'][3])]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

    await message.answer(question_text, reply_markup=keyboard)


async def show_results(message: types.Message):
    global user_answers, current_question_index, in_quiz
    correct_answers = user_answers.count(True)
    total_questions = len(questions)

    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions}")

    # –°–±—Ä–æ—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    current_question_index = 0
    user_answers = []
    current_level = int(db.get_user_info(message.from_user.id, 'level')[0])
    possible_level = current_level
    db.update_user_info(message.from_user.id, 'questions_qty', total_questions)
    db.update_user_info(message.from_user.id, 'correct_answers', correct_answers)
    db.update_user_info(message.from_user.id, 'incorrect_answers', total_questions - correct_answers)
    if correct_answers > 0:
        if difficulty_mapping[difficulty] == 1:
            possible_level = db.auto_update_user_level(message.from_user.id, correct_answers * 1)
        elif difficulty_mapping[difficulty] == 2:
            possible_level = db.auto_update_user_level(message.from_user.id, correct_answers * 2)
        else:
            possible_level = db.auto_update_user_level(message.from_user.id, correct_answers * 4)

    print(possible_level)
    if possible_level > current_level:
        await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ {possible_level} —É—Ä–æ–≤–µ–Ω—å!")
    in_quiz = False
    await main_menu(message)


def setup(dp):
    global questions
    dp.message.register(mq.get_hints_keyboard, lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
    dp.message.register(mq.give_hints, lambda message: message.text in mq.all_hints)
    dp.message.register(mq.answers_keyboard, lambda message: message.text == "‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å")
    dp.message.register(mq.not_know_answer, lambda message: message.text == "ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞")
    dp.message.register(cmd_start, Command('start'))
    dp.message.register(cmd_help, Command('help'))
    dp.message.register(cmd_stats, Command('stats'))
    dp.message.register(start_quiz, Command('victory'))
    dp.message.register(mq.get_movies_file, lambda message: message.text == "üîç –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    dp.message.register(start_quiz, lambda message: message.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    dp.message.register(choose_difficulty, lambda message: message.text.lower() in difficulty_mapping.keys())
    dp.message.register(mq.start_movie_quiz, lambda message: message.text == "üé¨ –ö–∏–Ω–æ–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    dp.message.register(cmd_stats, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(cmd_top, lambda message: message.text == "üèÜ –¢–æ–ø")
    dp.message.register(about_simple_quiz, lambda message: message.text == "‚ùì –û –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ")
    dp.message.register(about_movie_quiz, lambda message: message.text == "‚ùì –û –∫–∏–Ω–æ–≤–∏–∫—Ç–æ—Ä–∏–Ω–µ")
    dp.message.register(cmd_top_level, lambda message: message.text == "üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é")
    dp.message.register(cmd_top_questions_qty, lambda message: message.text == "üèÜ –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤")
    dp.message.register(main_menu, lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
    dp.message.register(main_menu, lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    # dp.callback_query.register(start_quiz, F.data == "victory")
    dp.message.register(answer_question, lambda message: message.text in questions[current_question_index]['answers'])
    dp.message.register(mq.movie_quiz_answer, lambda message: message.text)
